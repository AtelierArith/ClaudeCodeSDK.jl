var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.query","page":"API Reference","title":"ClaudeCodeSDK.query","text":"query(; prompt::String, options::Union{ClaudeCodeOptions, Nothing}=nothing)\n\nQuery Claude Code.\n\nJulia SDK for interacting with Claude Code.\n\nArguments\n\nprompt::String: The prompt to send to Claude\noptions::Union{ClaudeCodeOptions, Nothing}: Optional configuration (defaults to ClaudeCodeOptions() if nothing). Set options.permission_mode to control tool execution:\n'default': CLI prompts for dangerous tools\n'acceptEdits': Auto-accept file edits  \n'bypassPermissions': Allow all tools (use with caution)\nSet options.cwd for working directory.\n\nReturns\n\nVector{Message}: Vector of messages from the conversation\n\nExamples\n\n# Simple usage\nfor message in query(prompt=\"Hello\")\n    println(message)\nend\n\n# With options\nfor message in query(\n    prompt=\"Hello\",\n    options=ClaudeCodeOptions(\n        system_prompt=\"You are helpful\",\n        cwd=homedir()\n    )\n)\n    println(message)\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/#Configuration","page":"API Reference","title":"Configuration","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.ClaudeCodeOptions","page":"API Reference","title":"ClaudeCodeSDK.ClaudeCodeOptions","text":"Configuration options for Claude Code\n\n\n\n\n\n","category":"type"},{"location":"api/#Messages","page":"API Reference","title":"Messages","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.Message","page":"API Reference","title":"ClaudeCodeSDK.Message","text":"Base type for messages\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.AssistantMessage","page":"API Reference","title":"ClaudeCodeSDK.AssistantMessage","text":"Message from assistant\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.UserMessage","page":"API Reference","title":"ClaudeCodeSDK.UserMessage","text":"Message from user\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.SystemMessage","page":"API Reference","title":"ClaudeCodeSDK.SystemMessage","text":"System message\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.ResultMessage","page":"API Reference","title":"ClaudeCodeSDK.ResultMessage","text":"Result message\n\n\n\n\n\n","category":"type"},{"location":"api/#Content-Blocks","page":"API Reference","title":"Content Blocks","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.TextBlock","page":"API Reference","title":"ClaudeCodeSDK.TextBlock","text":"Text content block\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.ToolUseBlock","page":"API Reference","title":"ClaudeCodeSDK.ToolUseBlock","text":"Tool use content block\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.ToolResultBlock","page":"API Reference","title":"ClaudeCodeSDK.ToolResultBlock","text":"Tool result content block\n\n\n\n\n\n","category":"type"},{"location":"api/#Tools","page":"API Reference","title":"Tools","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.Tool","page":"API Reference","title":"ClaudeCodeSDK.Tool","text":"Base type for tools\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.ReadTool","page":"API Reference","title":"ClaudeCodeSDK.ReadTool","text":"Read tool\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.WriteTool","page":"API Reference","title":"ClaudeCodeSDK.WriteTool","text":"Write tool\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.BashTool","page":"API Reference","title":"ClaudeCodeSDK.BashTool","text":"Bash tool\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.ToolResult","page":"API Reference","title":"ClaudeCodeSDK.ToolResult","text":"Tool execution result\n\n\n\n\n\n","category":"type"},{"location":"api/#Tool-Functions","page":"API Reference","title":"Tool Functions","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.create_tool_from_block","page":"API Reference","title":"ClaudeCodeSDK.create_tool_from_block","text":"Create a tool instance from a ToolUseBlock\n\n\n\n\n\n","category":"function"},{"location":"api/#ClaudeCodeSDK.execute_tool","page":"API Reference","title":"ClaudeCodeSDK.execute_tool","text":"Execute a tool and return the result\n\n\n\n\n\n","category":"function"},{"location":"api/#Error-Types","page":"API Reference","title":"Error Types","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.ClaudeSDKError","page":"API Reference","title":"ClaudeCodeSDK.ClaudeSDKError","text":"Base error type for Claude SDK\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.CLINotFoundError","page":"API Reference","title":"ClaudeCodeSDK.CLINotFoundError","text":"Error when Claude Code CLI is not found\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.CLIConnectionError","page":"API Reference","title":"ClaudeCodeSDK.CLIConnectionError","text":"CLI connection error\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.ProcessError","page":"API Reference","title":"ClaudeCodeSDK.ProcessError","text":"Process execution error\n\n\n\n\n\n","category":"type"},{"location":"api/#ClaudeCodeSDK.CLIJSONDecodeError","page":"API Reference","title":"ClaudeCodeSDK.CLIJSONDecodeError","text":"JSON parsing error\n\n\n\n\n\n","category":"type"},{"location":"api/#Internal-Components","page":"API Reference","title":"Internal Components","text":"","category":"section"},{"location":"api/#Transport-Layer","page":"API Reference","title":"Transport Layer","text":"","category":"section"},{"location":"api/#ClaudeCodeSDK.SubprocessCLITransport","page":"API Reference","title":"ClaudeCodeSDK.SubprocessCLITransport","text":"Transport layer for communicating with Claude Code CLI\n\n\n\n\n\n","category":"type"},{"location":"api/#Function-Reference","page":"API Reference","title":"Function Reference","text":"","category":"section"},{"location":"api/#Main-Query-Function","page":"API Reference","title":"Main Query Function","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"query(prompt::String; options::Union{ClaudeCodeOptions, Nothing}=nothing)","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Main function for querying Claude through the CLI.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Parameters:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"prompt::String: The prompt to send to Claude\noptions::Union{ClaudeCodeOptions, Nothing}: Optional configuration (default: nothing)","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Returns: Vector{Message} - Vector of response messages for easy iteration","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Example:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"# Basic usage\nresult = query(\"Hello Claude\")\n\n# With options\noptions = ClaudeCodeOptions(system_prompt=\"You are helpful\")\nresult = query(\"Tell me a joke\", options=options)","category":"page"},{"location":"api/#Configuration-Options","page":"API Reference","title":"Configuration Options","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClaudeCodeOptions","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Configuration struct with all available options:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"allowed_tools::Vector{String} - Allowed tools list (default: String[])\nmax_thinking_tokens::Int - Maximum thinking tokens (default: 8000)\nsystem_prompt::Union{String, Nothing} - System prompt for Claude (default: nothing)\nappend_system_prompt::Union{String, Nothing} - Additional system prompt to append (default: nothing)\nmcp_tools::Vector{String} - MCP tools to enable (default: String[])\nmcp_servers::Dict{String, McpServerConfig} - MCP server configurations (default: Dict{String, McpServerConfig}())\npermission_mode::Union{String, Nothing} - Permission mode (\"acceptEdits\", etc.) (default: nothing)\ncontinue_conversation::Bool - Continue previous conversation (default: false)\nresume::Union{String, Nothing} - Resume from session ID (default: nothing)\nmax_turns::Union{Int, Nothing} - Maximum conversation turns (default: nothing)\ndisallowed_tools::Vector{String} - Tools to disallow (default: String[])\nmodel::Union{String, Nothing} - Claude model to use (default: nothing)\npermission_prompt_tool_name::Union{String, Nothing} - Permission prompt tool name (default: nothing)\ncwd::Union{String, Nothing} - Working directory (default: nothing)","category":"page"},{"location":"api/#Message-Types","page":"API Reference","title":"Message Types","text":"","category":"section"},{"location":"api/#AssistantMessage","page":"API Reference","title":"AssistantMessage","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Represents a message from Claude containing response content.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"content::Vector{ContentBlock} - Vector of content blocks (text, tool use, tool results)","category":"page"},{"location":"api/#UserMessage","page":"API Reference","title":"UserMessage","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Represents a message from the user.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"content::String - User message content","category":"page"},{"location":"api/#SystemMessage","page":"API Reference","title":"SystemMessage","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Represents a system message.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"subtype::String - System message subtype\ndata::Dict{String, Any} - System message data","category":"page"},{"location":"api/#ResultMessage","page":"API Reference","title":"ResultMessage","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Represents a result message from tool execution or other operations.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"subtype::String - Result message subtype\ncost_usd::Float64 - Cost in USD\nduration_ms::Int - Duration in milliseconds\nduration_api_ms::Int - API duration in milliseconds\nis_error::Bool - Whether this is an error result\nnum_turns::Int - Number of conversation turns\nsession_id::String - Session identifier\ntotal_cost_usd::Float64 - Total cost in USD\nusage::Union{Dict{String, Any}, Nothing} - Usage statistics (default: nothing)\nresult::Union{String, Nothing} - Result content (default: nothing)","category":"page"},{"location":"api/#Content-Block-Types","page":"API Reference","title":"Content Block Types","text":"","category":"section"},{"location":"api/#TextBlock","page":"API Reference","title":"TextBlock","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Contains text content from Claude's response.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"text::String - The text content","category":"page"},{"location":"api/#ToolUseBlock","page":"API Reference","title":"ToolUseBlock","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Represents Claude's request to use a tool.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"id::String - Tool use identifier\nname::String - Tool name\ninput::Dict{String, Any} - Tool input parameters","category":"page"},{"location":"api/#ToolResultBlock","page":"API Reference","title":"ToolResultBlock","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Contains the result of a tool execution.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"tool_use_id::String - ID of the tool use this result corresponds to\ncontent::Union{String, Vector{Dict{String, Any}}, Nothing} - Tool execution result content (default: nothing)\nis_error::Union{Bool, Nothing} - Whether the tool execution resulted in an error (default: nothing)","category":"page"},{"location":"api/#Tool-Types","page":"API Reference","title":"Tool Types","text":"","category":"section"},{"location":"api/#ReadTool","page":"API Reference","title":"ReadTool","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Tool for reading files.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"path::String - Path to file to read","category":"page"},{"location":"api/#WriteTool","page":"API Reference","title":"WriteTool","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Tool for writing files.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"path::String - Path to file to write\ncontent::String - Content to write","category":"page"},{"location":"api/#BashTool","page":"API Reference","title":"BashTool","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Tool for executing bash commands.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"command::String - Command to execute","category":"page"},{"location":"api/#ToolResult","page":"API Reference","title":"ToolResult","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Result of tool execution.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"success::Bool - Whether the tool execution was successful\noutput::Union{String, Nothing} - Tool output (default: nothing)\nerror::Union{String, Nothing} - Error message if execution failed (default: nothing)","category":"page"},{"location":"api/#MCP-Configuration","page":"API Reference","title":"MCP Configuration","text":"","category":"section"},{"location":"api/#McpServerConfig","page":"API Reference","title":"McpServerConfig","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Configuration for MCP (Model Context Protocol) servers.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"transport::Vector{String} - Transport configuration (e.g., command and arguments)\nenv::Union{Dict{String, Any}, Nothing} - Environment variables (default: nothing)","category":"page"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"This guide will help you get up and running with ClaudeCodeSDK.jl.","category":"page"},{"location":"getting-started/#Prerequisites","page":"Getting Started","title":"Prerequisites","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Before using ClaudeCodeSDK.jl, ensure you have:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Julia 1.10+ installed on your system\nNode.js for installing the Claude Code CLI\nClaude Code CLI: Install with npm install -g @anthropic-ai/claude-code","category":"page"},{"location":"getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Since the package is in development, you'll need to clone and set it up locally:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Clone the repository\ngit clone https://github.com/AtelierArith/ClaudeCodeSDK.jl.git\ncd ClaudeCodeSDK.jl\n\n# Install dependencies\njulia --project -e \"using Pkg; Pkg.instantiate()\"","category":"page"},{"location":"getting-started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"getting-started/#Simple-Query","page":"Getting Started","title":"Simple Query","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using ClaudeCodeSDK\n\n# Basic query - returns Vector{Message}\nresult = query(prompt=\"Hello Claude\")\nfor message in result\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(block.text)\n            end\n        end\n    end\nend","category":"page"},{"location":"getting-started/#Using-Configuration-Options","page":"Getting Started","title":"Using Configuration Options","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using ClaudeCodeSDK\n\n# Configure options\noptions = ClaudeCodeOptions(\n    system_prompt=\"You are a helpful assistant\",\n    max_turns=1\n)\n\n# Query with options\nresult = query(prompt=\"Tell me a joke\", options=options)\nfor message in result\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(block.text)\n            end\n        end\n    end\nend","category":"page"},{"location":"getting-started/#Complete-Configuration-Example","page":"Getting Started","title":"Complete Configuration Example","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# All available configuration options\noptions = ClaudeCodeOptions(\n    allowed_tools=[\"Read\", \"Write\", \"Bash\"],\n    max_thinking_tokens=8000,\n    system_prompt=\"You are a helpful assistant\",\n    append_system_prompt=nothing,\n    mcp_tools=String[],\n    mcp_servers=Dict{String, McpServerConfig}(),\n    permission_mode=\"acceptEdits\",\n    continue_conversation=false,\n    resume=nothing,\n    max_turns=5,\n    disallowed_tools=String[],\n    model=\"claude-3-5-sonnet-20241022\",\n    permission_prompt_tool_name=nothing,\n    cwd=\"/path/to/project\"\n)\n\nresult = query(prompt=\"Help me with my project\", options=options)","category":"page"},{"location":"getting-started/#Running-Tests","page":"Getting Started","title":"Running Tests","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Run all tests\njulia --project -e \"using Pkg; Pkg.test()\"\n\n# Run tests with verbose output\njulia --project -e \"using Pkg; Pkg.test(; test_args=[\\\"-v\\\"])\"","category":"page"},{"location":"getting-started/#Running-Examples","page":"Getting Started","title":"Running Examples","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"The repository includes several example files:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Start Julia REPL with project\njulia --project\n\n# Run specific examples\njulia --project examples/quick_start.jl\njulia --project examples/tool_execution_demo.jl\njulia --project examples/cli_aware_demo.jl","category":"page"},{"location":"getting-started/#Error-Handling","page":"Getting Started","title":"Error Handling","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Always wrap your queries in try-catch blocks for robust error handling:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using ClaudeCodeSDK\n\ntry\n    result = query(prompt=\"Hello\")\n    for message in result\n        println(message)\n    end\ncatch e\n    if e isa CLINotFoundError\n        println(\"Please install Claude Code CLI: npm install -g @anthropic-ai/claude-code\")\n    elseif e isa ProcessError\n        println(\"Process failed with exit code: $(e.exit_code)\")\n    elseif e isa CLIJSONDecodeError\n        println(\"Failed to parse response: $e\")\n    else\n        println(\"Unexpected error: $e\")\n    end\nend","category":"page"},{"location":"getting-started/#Next-Steps","page":"Getting Started","title":"Next Steps","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Check out the API Reference for detailed function documentation\nExplore Examples for more usage patterns\nLearn about the Architecture to understand the internal design","category":"page"},{"location":"errors/#Error-Handling","page":"Error Handling","title":"Error Handling","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"ClaudeCodeSDK.jl provides a comprehensive error handling system to help you deal with various failure scenarios when interacting with the Claude CLI.","category":"page"},{"location":"errors/#Exception-Hierarchy","page":"Error Handling","title":"Exception Hierarchy","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"All SDK-specific exceptions inherit from the base ClaudeSDKError type:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"abstract type ClaudeSDKError <: Exception end","category":"page"},{"location":"errors/#Core-Exception-Types","page":"Error Handling","title":"Core Exception Types","text":"","category":"section"},{"location":"errors/#CLINotFoundError","page":"Error Handling","title":"CLINotFoundError","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Thrown when the Claude CLI is not installed or not found in the system PATH.","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"struct CLINotFoundError <: ClaudeSDKError\n    message::String\nend","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Common causes:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Claude CLI not installed (npm install -g @anthropic-ai/claude-code)\nCLI not in system PATH\nIncorrect CLI command name","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Example:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"try\n    result = query(\"Hello\")\ncatch e\n    if e isa CLINotFoundError\n        println(\"Please install Claude CLI: npm install -g @anthropic-ai/claude-code\")\n    end\nend","category":"page"},{"location":"errors/#CLIConnectionError","page":"Error Handling","title":"CLIConnectionError","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Thrown when there are connection issues with the Claude CLI.","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"struct CLIConnectionError <: ClaudeSDKError\n    message::String\nend","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Common causes:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Network connectivity issues\nClaude API authentication problems\nService unavailability","category":"page"},{"location":"errors/#ProcessError","page":"Error Handling","title":"ProcessError","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Thrown when the CLI process fails or returns a non-zero exit code.","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"struct ProcessError <: ClaudeSDKError\n    exit_code::Int\n    output::String\nend","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Common causes:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Invalid CLI arguments\nAuthentication failures\nResource limitations\nCLI internal errors","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Example:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"try\n    result = query(\"Hello\")\ncatch e\n    if e isa ProcessError\n        println(\"CLI failed with exit code: $(e.exit_code)\")\n        println(\"Error output: $(e.output)\")\n    end\nend","category":"page"},{"location":"errors/#CLIJSONDecodeError","page":"Error Handling","title":"CLIJSONDecodeError","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Thrown when the SDK cannot parse the CLI's JSON response.","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"struct CLIJSONDecodeError <: ClaudeSDKError\n    message::String\n    raw_output::String\nend","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Common causes:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Malformed JSON output from CLI\nUnexpected response format\nCLI version incompatibility\nPartial or truncated responses","category":"page"},{"location":"errors/#Error-Handling-Patterns","page":"Error Handling","title":"Error Handling Patterns","text":"","category":"section"},{"location":"errors/#Basic-Error-Handling","page":"Error Handling","title":"Basic Error Handling","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"using ClaudeCodeSDK\n\ntry\n    result = query(\"What is 2 + 2?\")\n    for message in result\n        if message isa AssistantMessage\n            for block in message.content\n                if block isa TextBlock\n                    println(block.text)\n                end\n            end\n        end\n    end\ncatch e\n    println(\"Error occurred: $e\")\nend","category":"page"},{"location":"errors/#Comprehensive-Error-Handling","page":"Error Handling","title":"Comprehensive Error Handling","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"using ClaudeCodeSDK\n\nfunction safe_query(prompt::String, options=nothing)\n    try\n        return query(prompt, options=options)\n    catch e\n        if e isa CLINotFoundError\n            @error \"Claude CLI not found\" exception=e\n            println(\"Solution: Install Claude CLI with 'npm install -g @anthropic-ai/claude-code'\")\n            return Message[]\n        elseif e isa CLIConnectionError\n            @error \"Connection to Claude failed\" exception=e\n            println(\"Check your internet connection and Claude API credentials\")\n            return Message[]\n        elseif e isa ProcessError\n            @error \"CLI process failed\" exit_code=e.exit_code output=e.output\n            if e.exit_code == 1\n                println(\"Authentication or permission error\")\n            elseif e.exit_code == 2\n                println(\"Invalid arguments or configuration\")\n            else\n                println(\"Unexpected CLI error\")\n            end\n            return Message[]\n        elseif e isa CLIJSONDecodeError\n            @error \"Failed to parse CLI response\" raw_output=e.raw_output exception=e\n            println(\"This might indicate a CLI version incompatibility\")\n            return Message[]\n        else\n            @error \"Unexpected error\" exception=e\n            rethrow(e)  # Re-throw unknown errors\n        end\n    end\nend\n\n# Usage\nresult = safe_query(\"Hello Claude\")\nif !isempty(result)\n    println(\"Query successful!\")\nelse\n    println(\"Query failed, check error messages above\")\nend","category":"page"},{"location":"errors/#Retry-Logic","page":"Error Handling","title":"Retry Logic","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"using ClaudeCodeSDK\n\nfunction query_with_retry(prompt::String; max_retries=3, delay=1.0, options=nothing)\n    for attempt in 1:max_retries\n        try\n            return query(prompt, options=options)\n        catch e\n            if e isa CLIConnectionError && attempt < max_retries\n                @warn \"Connection failed, retrying in $(delay) seconds...\" attempt=attempt\n                sleep(delay)\n                delay *= 2  # Exponential backoff\n                continue\n            else\n                rethrow(e)\n            end\n        end\n    end\nend\n\n# Usage\ntry\n    result = query_with_retry(\"Hello Claude\", max_retries=3)\n    println(\"Success after retry!\")\ncatch e\n    println(\"Failed after all retries: $e\")\nend","category":"page"},{"location":"errors/#Logging-and-Debugging","page":"Error Handling","title":"Logging and Debugging","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"using ClaudeCodeSDK\nusing Logging\n\n# Enable debug logging\nwith_logger(ConsoleLogger(stderr, Logging.Debug)) do\n    try\n        result = query(\"Debug test\")\n        @debug \"Query successful\" result_length=length(result)\n    catch e\n        @error \"Query failed\" exception=(e, catch_backtrace())\n        \n        # Additional debugging information\n        if e isa ProcessError\n            @debug \"Process details\" exit_code=e.exit_code output=e.output\n        elseif e isa CLIJSONDecodeError\n            @debug \"JSON parsing details\" raw_output=e.raw_output\n        end\n    end\nend","category":"page"},{"location":"errors/#Testing-Error-Conditions","page":"Error Handling","title":"Testing Error Conditions","text":"","category":"section"},{"location":"errors/#Mocking-Errors-for-Testing","page":"Error Handling","title":"Mocking Errors for Testing","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"using ClaudeCodeSDK\nusing Test\n\n# Test error handling without actual CLI\n@testset \"Error Handling Tests\" begin\n    @testset \"CLINotFoundError\" begin\n        error = CLINotFoundError(\"CLI not found\")\n        @test error isa CLINotFoundError\n        @test error isa ClaudeSDKError\n        @test error.message == \"CLI not found\"\n    end\n    \n    @testset \"ProcessError\" begin\n        error = ProcessError(1, \"Authentication failed\")\n        @test error isa ProcessError\n        @test error.exit_code == 1\n        @test error.output == \"Authentication failed\"\n    end\n    \n    @testset \"CLIJSONDecodeError\" begin\n        error = CLIJSONDecodeError(\"Invalid JSON\", \"{invalid\")\n        @test error isa CLIJSONDecodeError\n        @test error.message == \"Invalid JSON\"\n        @test error.raw_output == \"{invalid\"\n    end\nend","category":"page"},{"location":"errors/#CLI-Availability-Testing","page":"Error Handling","title":"CLI Availability Testing","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"using ClaudeCodeSDK\n\nfunction test_cli_availability()\n    try\n        # Try a simple query to test CLI\n        result = query(\"test\")\n        return true, \"CLI is working\"\n    catch e\n        if e isa CLINotFoundError\n            return false, \"CLI not installed\"\n        elseif e isa CLIConnectionError\n            return false, \"CLI connection failed\"\n        elseif e isa ProcessError\n            return false, \"CLI process error: $(e.exit_code)\"\n        else\n            return false, \"Unknown error: $e\"\n        end\n    end\nend\n\n# Usage in tests\nis_available, message = test_cli_availability()\nif is_available\n    println(\"✓ CLI tests can run\")\nelse\n    println(\"⚠ CLI tests will be skipped: $message\")\nend","category":"page"},{"location":"errors/#Best-Practices","page":"Error Handling","title":"Best Practices","text":"","category":"section"},{"location":"errors/#1.-Always-Use-Try-Catch","page":"Error Handling","title":"1. Always Use Try-Catch","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Never call query() without error handling in production code:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"# Bad\nresult = query(\"Hello\")  # Can throw exceptions\n\n# Good\ntry\n    result = query(\"Hello\")\n    # Handle result\ncatch e\n    # Handle error\nend","category":"page"},{"location":"errors/#2.-Provide-User-Friendly-Error-Messages","page":"Error Handling","title":"2. Provide User-Friendly Error Messages","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"try\n    result = query(prompt)\ncatch e\n    if e isa CLINotFoundError\n        println(\"❌ Claude CLI is not installed.\")\n        println(\"📦 Install it with: npm install -g @anthropic-ai/claude-code\")\n    elseif e isa ProcessError\n        println(\"❌ Query failed. Check your Claude configuration.\")\n    else\n        println(\"❌ An unexpected error occurred: $e\")\n    end\nend","category":"page"},{"location":"errors/#3.-Log-Errors-for-Debugging","page":"Error Handling","title":"3. Log Errors for Debugging","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"using Logging\n\ntry\n    result = query(prompt)\ncatch e\n    @error \"Query failed\" prompt=prompt exception=e\n    # Handle error gracefully\nend","category":"page"},{"location":"errors/#4.-Implement-Graceful-Degradation","page":"Error Handling","title":"4. Implement Graceful Degradation","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"function get_claude_response(prompt::String; fallback=\"Sorry, I couldn't process your request.\")\n    try\n        result = query(prompt)\n        # Extract text from result\n        for message in result\n            if message isa AssistantMessage\n                for block in message.content\n                    if block isa TextBlock\n                        return block.text\n                    end\n                end\n            end\n        end\n        return fallback\n    catch e\n        @warn \"Claude query failed, using fallback\" exception=e\n        return fallback\n    end\nend","category":"page"},{"location":"errors/#5.-Test-Error-Scenarios","page":"Error Handling","title":"5. Test Error Scenarios","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"Always test your error handling code:","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"@testset \"Error Scenarios\" begin\n    # Test with invalid configuration\n    @test_throws ProcessError query(\"test with bad config\")\n    \n    # Test graceful degradation\n    response = get_claude_response(\"test\", fallback=\"fallback\")\n    @test response isa String\nend","category":"page"},{"location":"errors/#Debugging-Tips","page":"Error Handling","title":"Debugging Tips","text":"","category":"section"},{"location":"errors/#Enable-Verbose-Output","page":"Error Handling","title":"Enable Verbose Output","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"# Configure options for debugging\noptions = ClaudeCodeOptions(\n    allowed_tools=[\"Read\", \"Write\", \"Bash\"]\n)\nresult = query(\"Debug query\", options=options)","category":"page"},{"location":"errors/#Capture-Raw-CLI-Output","page":"Error Handling","title":"Capture Raw CLI Output","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"# For debugging CLI communication issues\ntry\n    result = query(\"test\")\ncatch e\n    if e isa CLIJSONDecodeError\n        println(\"Raw CLI output:\")\n        println(e.raw_output)\n    end\nend","category":"page"},{"location":"errors/#Check-CLI-Version-Compatibility","page":"Error Handling","title":"Check CLI Version Compatibility","text":"","category":"section"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"function check_cli_version()\n    try\n        # This would need to be implemented based on CLI capabilities\n        output = read(`claude --version`, String)\n        println(\"Claude CLI version: $output\")\n    catch e\n        println(\"Could not determine CLI version: $e\")\n    end\nend","category":"page"},{"location":"errors/","page":"Error Handling","title":"Error Handling","text":"The error handling system in ClaudeCodeSDK.jl is designed to provide clear, actionable feedback while maintaining robust operation even when the underlying CLI encounters issues.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This page contains various usage examples for ClaudeCodeSDK.jl.","category":"page"},{"location":"examples/#Basic-Examples","page":"Examples","title":"Basic Examples","text":"","category":"section"},{"location":"examples/#Simple-Query","page":"Examples","title":"Simple Query","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Basic query\nresult = query(prompt=\"What is 2 + 2?\")\nfor message in result\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(\"Claude says: $(block.text)\")\n            end\n        end\n    end\nend","category":"page"},{"location":"examples/#Query-with-System-Prompt","page":"Examples","title":"Query with System Prompt","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Configure with system prompt\noptions = ClaudeCodeOptions(\n    system_prompt=\"You are a helpful math tutor. Explain your reasoning step by step.\"\n)\n\nresult = query(prompt=\"How do you solve 2x + 5 = 13?\", options=options)\nfor message in result\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(block.text)\n            end\n        end\n    end\nend","category":"page"},{"location":"examples/#Configuration-Examples","page":"Examples","title":"Configuration Examples","text":"","category":"section"},{"location":"examples/#Working-Directory","page":"Examples","title":"Working Directory","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Set working directory for file operations\noptions = ClaudeCodeOptions(\n    cwd=\"/path/to/my/project\",\n    allowed_tools=[\"Read\", \"Write\"]\n)\n\nresult = query(prompt=\"List the files in the current directory\", options=options)","category":"page"},{"location":"examples/#Model-Selection","page":"Examples","title":"Model Selection","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Use specific Claude model\noptions = ClaudeCodeOptions(\n    model=\"claude-3-5-sonnet-20241022\"\n)\n\nresult = query(prompt=\"Write a haiku about programming\", options=options)","category":"page"},{"location":"examples/#Permission-Modes","page":"Examples","title":"Permission Modes","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Auto-accept file edits\noptions = ClaudeCodeOptions(\n    allowed_tools=[\"Read\", \"Write\", \"Bash\"],\n    permission_mode=\"acceptEdits\"\n)\n\nresult = query(prompt=\"Create a hello.jl file with a simple greeting\", options=options)","category":"page"},{"location":"examples/#Advanced-Examples","page":"Examples","title":"Advanced Examples","text":"","category":"section"},{"location":"examples/#Multiple-Turn-Conversation","page":"Examples","title":"Multiple Turn Conversation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Configure for multi-turn conversation\noptions = ClaudeCodeOptions(\n    max_turns=5,\n    system_prompt=\"You are a coding assistant helping with Julia programming.\"\n)\n\n# First query\nresult1 = query(prompt=\"Help me write a function to calculate fibonacci numbers\", options=options)\n\n# Process response and continue conversation\n# Note: Currently each query is independent - conversation state is maintained by Claude CLI\nresult2 = query(prompt=\"Can you optimize that fibonacci function?\", options=options)","category":"page"},{"location":"examples/#Tool-Usage-with-Error-Handling","page":"Examples","title":"Tool Usage with Error Handling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Configure tools and error handling\noptions = ClaudeCodeOptions(\n    allowed_tools=[\"Read\", \"Write\", \"Bash\"],\n    cwd=pwd()\n)\n\ntry\n    result = query(prompt=\"Read the contents of README.md and summarize it\", options=options)\n    \n    for message in result\n        if message isa AssistantMessage\n            for block in message.content\n                if block isa TextBlock\n                    println(\"Summary: $(block.text)\")\n                elseif block isa ToolUseBlock\n                    println(\"Tool used: $(block.name) with input: $(block.input)\")\n                elseif block isa ToolResultBlock\n                    println(\"Tool result: $(block.content)\")\n                end\n            end\n        end\n    end\n    \ncatch e\n    if e isa CLINotFoundError\n        println(\"Error: Claude CLI not found. Install with: npm install -g @anthropic-ai/claude-code\")\n    elseif e isa ProcessError\n        println(\"Error: Process failed with exit code $(e.exit_code)\")\n        println(\"Output: $(e.output)\")\n    else\n        println(\"Unexpected error: $e\")\n    end\nend","category":"page"},{"location":"examples/#Development-Assistant","page":"Examples","title":"Development Assistant","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Configure as development assistant\noptions = ClaudeCodeOptions(\n    system_prompt=\"You are a Julia development assistant. Help with code review, debugging, and optimization.\",\n    allowed_tools=[\"Read\", \"Write\", \"Bash\"],\n    cwd=pwd(),\n    max_turns=10\n)\n\n# Ask for code review\nresult = query(prompt=\"Please review the code in src/ClaudeCodeSDK.jl and suggest improvements\", options=options)\n\nfor message in result\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(\"Review: $(block.text)\")\n            end\n        end\n    end\nend","category":"page"},{"location":"examples/#Testing-Examples","page":"Examples","title":"Testing Examples","text":"","category":"section"},{"location":"examples/#CLI-Availability-Check","page":"Examples","title":"CLI Availability Check","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Check if CLI is available before making requests\nfunction is_cli_available()\n    try\n        # Simple test query\n        result = query(prompt=\"test\")\n        return true\n    catch e\n        if e isa CLINotFoundError\n            return false\n        else\n            rethrow(e)\n        end\n    end\nend\n\nif is_cli_available()\n    println(\"Claude CLI is available\")\n    result = query(prompt=\"Hello Claude!\")\nelse\n    println(\"Claude CLI not found. Please install it first.\")\nend","category":"page"},{"location":"examples/#Mock-Testing-(Without-CLI)","page":"Examples","title":"Mock Testing (Without CLI)","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Example of testing SDK components without CLI\nfunction test_message_parsing()\n    # Create test message\n    text_block = TextBlock(\"Hello from Claude\")\n    assistant_msg = AssistantMessage([text_block])\n    \n    # Test message structure\n    @assert assistant_msg isa AssistantMessage\n    @assert length(assistant_msg.content) == 1\n    @assert assistant_msg.content[1] isa TextBlock\n    @assert assistant_msg.content[1].text == \"Hello from Claude\"\n    \n    println(\"Message parsing test passed!\")\nend\n\ntest_message_parsing()","category":"page"},{"location":"examples/#Integration-Examples","page":"Examples","title":"Integration Examples","text":"","category":"section"},{"location":"examples/#Project-Analysis","page":"Examples","title":"Project Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Analyze a Julia project\noptions = ClaudeCodeOptions(\n    system_prompt=\"You are a Julia code analyst. Analyze project structure and provide insights.\",\n    allowed_tools=[\"Read\", \"Bash\"],\n    cwd=\"/path/to/julia/project\"\n)\n\nqueries = [\n    \"Analyze the Project.toml file and list the dependencies\",\n    \"Read the main module file and describe its architecture\",\n    \"Run the tests and report any issues\"\n]\n\nfor query_text in queries\n    println(\"\\\\n=== $query_text ===\")\n    try\n        result = query(prompt=query_text, options=options)\n        for message in result\n            if message isa AssistantMessage\n                for block in message.content\n                    if block isa TextBlock\n                        println(block.text)\n                    end\n                end\n            end\n        end\n    catch e\n        println(\"Error with query '$query_text': $e\")\n    end\nend","category":"page"},{"location":"examples/#Documentation-Generation","page":"Examples","title":"Documentation Generation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ClaudeCodeSDK\n\n# Generate documentation\noptions = ClaudeCodeOptions(\n    system_prompt=\"You are a documentation generator for Julia packages.\",\n    allowed_tools=[\"Read\", \"Write\"],\n    cwd=pwd()\n)\n\nresult = query(prompt=\"Read the source files and generate API documentation in Markdown format\", options=options)\n\nfor message in result\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(\"Documentation generated:\")\n                println(block.text)\n            end\n        end\n    end\nend","category":"page"},{"location":"examples/#Running-the-Example-Files","page":"Examples","title":"Running the Example Files","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The repository includes several example files you can run directly:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Basic usage example\njulia --project examples/quick_start.jl\n\n# Tool execution without CLI\njulia --project examples/tool_execution_demo.jl\n\n# CLI-aware functionality\njulia --project examples/cli_aware_demo.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Each example file demonstrates different aspects of the SDK and includes comprehensive error handling and output formatting.","category":"page"},{"location":"architecture/#Architecture","page":"Architecture","title":"Architecture","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"This document describes the internal architecture of ClaudeCodeSDK.jl and how it mirrors the Python SDK while following Julia conventions.","category":"page"},{"location":"architecture/#Overview","page":"Architecture","title":"Overview","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"ClaudeCodeSDK.jl is a Julia port of the Claude Code SDK that wraps the Claude Code CLI. The architecture follows a modular design closely matching the Python SDK while leveraging Julia's type system and conventions.","category":"page"},{"location":"architecture/#Core-Components","page":"Architecture","title":"Core Components","text":"","category":"section"},{"location":"architecture/#1.-Main-Module-(src/ClaudeCodeSDK.jl)","page":"Architecture","title":"1. Main Module (src/ClaudeCodeSDK.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"The entry point containing:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"query() function - Main public API\nInternalClient - Core orchestration logic\nModule exports and public interface","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"# Main query function\nfunction query(prompt::String; options::Union{ClaudeCodeOptions, Nothing}=nothing)\n    client = InternalClient()\n    return client.query(prompt, options)\nend","category":"page"},{"location":"architecture/#2.-Types-System-(src/types.jl)","page":"Architecture","title":"2. Types System (src/types.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Comprehensive type definitions that mirror the Python SDK:","category":"page"},{"location":"architecture/#Configuration-Types","page":"Architecture","title":"Configuration Types","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"ClaudeCodeOptions - Complete configuration with 14 fields including MCP support\nMcpServerConfig - MCP server configuration structure\nSupport for all Claude CLI options and parameters","category":"page"},{"location":"architecture/#Message-Types","page":"Architecture","title":"Message Types","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Message (abstract base type)\nAssistantMessage - Claude's responses\nUserMessage - User inputs  \nSystemMessage - System prompts\nResultMessage - Operation results","category":"page"},{"location":"architecture/#Content-Block-Types","page":"Architecture","title":"Content Block Types","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"ContentBlock (abstract base type)\nTextBlock - Text content\nToolUseBlock - Tool invocation requests\nToolResultBlock - Tool execution results","category":"page"},{"location":"architecture/#Tool-Types","page":"Architecture","title":"Tool Types","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Tool (abstract base type)\nReadTool - File reading operations\nWriteTool - File writing operations\nBashTool - Command execution","category":"page"},{"location":"architecture/#3.-Transport-Layer-(src/internal/cli.jl)","page":"Architecture","title":"3. Transport Layer (src/internal/cli.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Handles communication with the Claude CLI:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"abstract type CLITransport end\n\nstruct SubprocessCLITransport <: CLITransport\n    # CLI process management\nend\n\nfunction execute_query(transport::SubprocessCLITransport, prompt::String, options::ClaudeCodeOptions)\n    # Execute CLI command and capture output\nend","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Key responsibilities:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"CLI process spawning and management\nCommand-line argument construction\nOutput capture and parsing\nError handling and process cleanup","category":"page"},{"location":"architecture/#4.-Error-Handling-(src/errors.jl)","page":"Architecture","title":"4. Error Handling (src/errors.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Comprehensive exception hierarchy:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"abstract type ClaudeSDKError <: Exception end\n\nstruct CLINotFoundError <: ClaudeSDKError\n    message::String\nend\n\nstruct CLIConnectionError <: ClaudeSDKError\n    message::String\nend\n\nstruct ProcessError <: ClaudeSDKError\n    exit_code::Int\n    output::String\nend\n\nstruct CLIJSONDecodeError <: ClaudeSDKError\n    message::String\n    raw_output::String\nend","category":"page"},{"location":"architecture/#5.-Tool-System-(src/internal/tools.jl)","page":"Architecture","title":"5. Tool System (src/internal/tools.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Local tool execution capabilities:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"function execute_tool(tool::ReadTool)\n    # Read file and return content\nend\n\nfunction execute_tool(tool::WriteTool)\n    # Write content to file\nend\n\nfunction execute_tool(tool::BashTool)\n    # Execute bash command\nend","category":"page"},{"location":"architecture/#6.-Utilities-(src/internal/utils.jl)","page":"Architecture","title":"6. Utilities (src/internal/utils.jl)","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Helper functions for:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"JSON serialization/deserialization\nCLI argument formatting\nResponse parsing\nType conversions","category":"page"},{"location":"architecture/#Key-Design-Patterns","page":"Architecture","title":"Key Design Patterns","text":"","category":"section"},{"location":"architecture/#Vector-based-Message-Return","page":"Architecture","title":"Vector-based Message Return","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Unlike the Python SDK's async streaming approach, the Julia SDK returns a Vector{Message}:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"# Python SDK (async streaming)\nasync for message in query(\"hello\"):\n    print(message)\n\n# Julia SDK (vector-based)\nfor message in query(\"hello\")\n    println(message)\nend","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Benefits:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Simpler iteration pattern\nBetter integration with Julia's ecosystem\nEasier debugging and inspection\nNatural fit for Julia's array-oriented design","category":"page"},{"location":"architecture/#Type-Safety","page":"Architecture","title":"Type Safety","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Full Julia type annotations with strict type checking:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"struct ClaudeCodeOptions\n    allowed_tools::Vector{String}\n    max_thinking_tokens::Int\n    system_prompt::Union{String, Nothing}\n    append_system_prompt::Union{String, Nothing}\n    mcp_tools::Vector{String}\n    mcp_servers::Dict{String, McpServerConfig}\n    permission_mode::Union{String, Nothing}\n    continue_conversation::Bool\n    resume::Union{String, Nothing}\n    max_turns::Union{Int, Nothing}\n    disallowed_tools::Vector{String}\n    model::Union{String, Nothing}\n    permission_prompt_tool_name::Union{String, Nothing}\n    cwd::Union{String, Nothing}\nend","category":"page"},{"location":"architecture/#Transport-Abstraction","page":"Architecture","title":"Transport Abstraction","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Clean separation between CLI communication and SDK logic:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"abstract type CLITransport end\n\n# Allows for future implementations (HTTP, WebSocket, etc.)\nstruct SubprocessCLITransport <: CLITransport end\nstruct HTTPTransport <: CLITransport end  # Future possibility","category":"page"},{"location":"architecture/#Message-Parsing-Strategy","page":"Architecture","title":"Message Parsing Strategy","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"The SDK handles CLI text output by:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"CLI Execution: Run claude --print for text output\nResponse Wrapping: Wrap text in AssistantMessage with TextBlock\nType Construction: Create proper message hierarchy\nVector Return: Return as Vector{Message} for iteration","category":"page"},{"location":"architecture/#Data-Flow","page":"Architecture","title":"Data Flow","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"User Query\n    ↓\nquery() function\n    ↓\nInternalClient.query()\n    ↓\nSubprocessCLITransport.execute_query()\n    ↓\nCLI Process (`claude --print`)\n    ↓\nRaw Text Output\n    ↓\nResponse Parsing\n    ↓\nMessage Construction\n    ↓\nVector{Message} Return\n    ↓\nUser Iteration","category":"page"},{"location":"architecture/#CLI-Integration","page":"Architecture","title":"CLI Integration","text":"","category":"section"},{"location":"architecture/#Command-Construction","page":"Architecture","title":"Command Construction","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Options are converted to CLI arguments:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"function build_cli_args(options::ClaudeCodeOptions)\n    args = String[]\n    \n    # Add --print for text output\n    push!(args, \"--print\")\n    \n    # Add configured options\n    if options.system_prompt !== nothing\n        push!(args, \"--system-prompt\", options.system_prompt)\n    end\n    \n    if options.max_turns !== nothing\n        push!(args, \"--max-turns\", string(options.max_turns))\n    end\n    \n    if !isempty(options.allowed_tools)\n        for tool in options.allowed_tools\n            push!(args, \"--allowed-tools\", tool)\n        end\n    end\n    \n    # ... handle all other options\n    \n    return args\nend","category":"page"},{"location":"architecture/#Process-Management","page":"Architecture","title":"Process Management","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Safe process handling with proper cleanup:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"function execute_cli_command(args::Vector{String}, input::String)\n    try\n        process = open(`claude $args`, \"r+\")\n        write(process, input)\n        close(process.in)\n        output = read(process, String)\n        wait(process)\n        return output\n    catch e\n        # Handle process errors\n        throw(ProcessError(e.exitcode, e.message))\n    end\nend","category":"page"},{"location":"architecture/#Testing-Strategy","page":"Architecture","title":"Testing Strategy","text":"","category":"section"},{"location":"architecture/#Multi-tier-Testing-Approach","page":"Architecture","title":"Multi-tier Testing Approach","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Type Construction Tests (always run)\nTest SDK components without CLI dependency\nValidate type system and constructors\nUnit test utilities and helpers\nCLI-dependent Tests (conditional)\nOnly run if claude CLI is available\nTest actual CLI communication\nIntegration testing with real Claude\nTool Tests (local execution)\nTest tool system without CLI\nValidate tool execution logic\nFile system operations\nError Handling Tests\nTest exception hierarchy\nValidate error propagation\nCLI failure scenarios","category":"page"},{"location":"architecture/#Test-Detection-Pattern","page":"Architecture","title":"Test Detection Pattern","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"function is_cli_available()\n    try\n        run(`claude --version`)\n        return true\n    catch\n        return false\n    end\nend\n\n@testset \"CLI Tests\" begin\n    if is_cli_available()\n        # Run CLI-dependent tests\n    else\n        @test_skip \"CLI not available\"\n    end\nend","category":"page"},{"location":"architecture/#Future-Enhancements","page":"Architecture","title":"Future Enhancements","text":"","category":"section"},{"location":"architecture/#Planned-Improvements","page":"Architecture","title":"Planned Improvements","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Streaming Support\nImplement streaming JSON response parsing\nSupport real-time output display\nMaintain backward compatibility\nEnhanced Tool Integration\nBetter CLI tool interface\nTool result parsing improvements\nInteractive tool approval\nPerformance Optimizations\nCLI process reuse\nResponse caching\nParallel query support\nAdvanced Features\nMemory persistence\nConversation threading\nPlugin system","category":"page"},{"location":"architecture/#Extensibility-Points","page":"Architecture","title":"Extensibility Points","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"The architecture supports future extensions:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"New Transport Types: HTTP, WebSocket, gRPC\nAdditional Tools: Custom tool definitions\nMessage Formats: JSON, XML, custom protocols\nAuthentication: API keys, OAuth, custom auth","category":"page"},{"location":"architecture/#Comparison-with-Python-SDK","page":"Architecture","title":"Comparison with Python SDK","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Aspect Python SDK Julia SDK\nReturn Type AsyncIterator[Message] Vector{Message}\nExecution Async/await Synchronous\nType System Dataclasses + type hints Native Julia structs\nError Handling Exception hierarchy Exception hierarchy\nCLI Communication Subprocess async Subprocess sync\nTool System Integrated Local + CLI integration\nDependencies aiofiles, subprocess JSON.jl, Base modules","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"The Julia implementation maintains API compatibility while leveraging Julia's strengths in type safety, performance, and ecosystem integration.","category":"page"},{"location":"#ClaudeCodeSDK.jl","page":"Home","title":"ClaudeCodeSDK.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A comprehensive Julia port of the Claude Code SDK that provides a native Julia interface for interacting with Claude Code CLI. This implementation closely mirrors the official Python SDK architecture while leveraging Julia's strengths in type safety and performance.","category":"page"},{"location":"#Status","page":"Home","title":"Status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"✅ Fully functional - Complete feature parity with Python SDK. All core features implemented, tested, and working.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"✅ Complete Implementation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Keyword Argument API: query(prompt=\"...\", options=...) matching Python SDK\nAdvanced Configuration: All 14 ClaudeCodeOptions fields including MCP support\nRobust CLI Integration: Complete command building with all CLI options\nType Safety: Full Julia type annotations throughout\nTool Execution: Read, Write, Bash tools with proper result handling\nMessage Parsing: Complete support for all message types\nJSON Streaming: Real-time response parsing from CLI\nError Handling: Comprehensive exception hierarchy\nCost Tracking: Usage and cost information from queries\nEnvironment Management: Working directory and environment variable support\nMCP Support: Model Context Protocol servers and tools","category":"page"},{"location":"","page":"Home","title":"Home","text":"✅ Python SDK Compatibility:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Same API patterns and functionality\nEquivalent configuration options\nMatching error handling\nSimilar message structure","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is currently in development. To use it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Clone the repository\ngit clone https://github.com/AtelierArith/ClaudeCodeSDK.jl.git\ncd ClaudeCodeSDK.jl\n\n# Install dependencies\njulia --project -e \"using Pkg; Pkg.instantiate()\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Prerequisites:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Julia 1.10+\nNode.js to install Claude Code CLI: npm install -g @anthropic-ai/claude-code","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ClaudeCodeSDK\n\n# Basic query (new keyword argument API)\nfor message in query(prompt=\"What is 2 + 2?\")\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(block.text)  # Output: 4\n            end\n        end\n    end\nend\n\n# With configuration options\noptions = ClaudeCodeOptions(\n    system_prompt=\"You are a helpful assistant that explains things simply.\",\n    max_turns=1\n)\n\nfor message in query(prompt=\"Explain what Julia is in one sentence.\", options=options)\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(block.text)\n            end\n        end\n    end\nend\n\n# Using tools\noptions = ClaudeCodeOptions(\n    allowed_tools=[\"Read\", \"Write\"],\n    permission_mode=\"acceptEdits\"\n)\n\nfor message in query(\n    prompt=\"Create a file called hello.txt with 'Hello, World!' in it\",\n    options=options\n)\n    if message isa AssistantMessage\n        for block in message.content\n            if block isa TextBlock\n                println(block.text)\n            end\n        end\n    elseif message isa ResultMessage\n        println(\"Cost: \\$$(round(message.cost_usd, digits=4))\")\n    end\nend","category":"page"},{"location":"#Recent-Updates","page":"Home","title":"Recent Updates","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"✅ CLI-Aware Demo Fixed: All example files now work correctly with proper keyword argument syntax.","category":"page"},{"location":"#Available-Examples","page":"Home","title":"Available Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The repository includes several runnable examples:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Basic usage with all features\njulia --project examples/quick_start.jl\n\n# JSON streaming and message processing demo\njulia --project examples/streaming_demo.jl\n\n# Tool execution without CLI dependency\njulia --project examples/tool_execution_demo.jl\n\n# CLI-aware functionality with error handling\njulia --project examples/cli_aware_demo.jl","category":"page"},{"location":"#Next-Steps","page":"Home","title":"Next Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Getting Started Guide\nAPI Reference\nExamples\nArchitecture Overview","category":"page"}]
}
